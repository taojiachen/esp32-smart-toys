[1/11] Performing build step for 'bootloader'
[1/1] cd /home/tjc/esp/develop/esp-ai/build/bootloader/esp-idf/esptool_py && /home/tjc/.espressif/python_env/idf5.3_py3.8_env/bin/python /home/tjc/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 /home/tjc/esp/develop/esp-ai/build/bootloader/bootloader.bin
Bootloader binary size 0x5810 bytes. 0x27f0 bytes (31%) free.
[2/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/app/app_sr.c.obj
../main/app/app_sr.c: In function 'audio_feed_task':
../main/app/app_sr.c:76:36: warning: passing argument 2 of 'afe_handle->feed' from incompatible pointer type [-Wincompatible-pointer-types]
   76 |         afe_handle->feed(afe_data, audio_buffer);
      |                                    ^~~~~~~~~~~~
      |                                    |
      |                                    int32_t * {aka long int *}
../main/app/app_sr.c:76:36: note: expected 'const int16_t *' {aka 'const short int *'} but argument is of type 'int32_t *' {aka 'long int *'}
../main/app/app_sr.c:77:31: warning: initialization of 'int16_t *' {aka 'short int *'} from incompatible pointer type 'afe_fetch_result_t *' [-Wincompatible-pointer-types]
   77 |         int16_t *afe_result = afe_handle->fetch(afe_data);
      |                               ^~~~~~~~~~
[3/9] Linking C static library esp-idf/main/libmain.a
[4/9] cd /home/tjc/esp/develop/esp-ai/build/esp-idf/main && /home/tjc/.espressif/python_env/idf5.3_py3.8_env/bin/python /home/tjc/esp/esp-idf/components/spiffs/spiffsgen.py 0x600000 /home/tjc/esp/develop/esp-ai/spiffs /home/tjc/esp/develop/esp-ai/build/storage.bin --page-size=256 --obj-name-len=32 --meta-len=4 --use-magic --use-magic-len
[5/9] Generating ld/sections.ld
[6/9] Linking CXX executable esp-ai.elf
[7/9] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated /home/tjc/esp/develop/esp-ai/build/esp-ai.bin
[8/9] cd /home/tjc/esp/develop/esp-ai/build/esp-idf/esptool_py && /home/tjc/.espressif/python_env/idf5.3_py3.8_env/bin/python /home/tjc/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/tjc/esp/develop/esp-ai/build/partition_table/partition-table.bin /home/tjc/esp/develop/esp-ai/build/esp-ai.bin
esp-ai.bin binary size 0x1742c0 bytes. Smallest app partition is 0x400000 bytes. 0x28bd40 bytes (64%) free.
[8/9] cd /home/tjc/esp/esp-idf/components/esptool_py && /usr/bin/cmake -D IDF_PATH=/home/tjc/esp/esp-idf -D "SERIAL_TOOL=/home/tjc/.espressif/python_env/idf5.3_py3.8_env/bin/python;;/home/tjc/esp/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32s3" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/home/tjc/esp/develop/esp-ai/build -P /home/tjc/esp/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool.py --chip esp32s3 -p /dev/ttyUSB0 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 16MB 0x0 bootloader/bootloader.bin 0x20000 esp-ai.bin 0x8000 partition_table/partition-table.bin 0x420000 storage.bin 0xa20000 srmodels/srmodels.bin
esptool.py v4.8.1
Serial port /dev/ttyUSB0
Connecting....
Chip is ESP32-S3 (QFN56) (revision v0.2)
Features: WiFi, BLE, Embedded PSRAM 8MB (AP_3v3)
Crystal is 40MHz
MAC: f0:9e:9e:22:22:dc
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00005fff...
Flash will be erased from 0x00020000 to 0x00194fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Flash will be erased from 0x00420000 to 0x00a1ffff...
Flash will be erased from 0x00a20000 to 0x00cf5fff...
SHA digest in image updated
Compressed 22544 bytes to 13929...
Writing at 0x00000000... (100 %)
Wrote 22544 bytes (13929 compressed) at 0x00000000 in 0.8 seconds (effective 228.1 kbit/s)...
Hash of data verified.
Compressed 1524416 bytes to 961279...
Writing at 0x00020000... (1 %)
Writing at 0x0002e681... (3 %)
Writing at 0x0003d208... (5 %)
Writing at 0x000482e9... (6 %)
Writing at 0x0004e173... (8 %)
Writing at 0x00052d53... (10 %)
Writing at 0x00058eba... (11 %)
Writing at 0x0005e481... (13 %)
